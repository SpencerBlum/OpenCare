{"ast":null,"code":"var _jsxFileName = \"/Users/spencerblum/Development/projects/OpenCare/frontend/src/component/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Geocode from \"react-geocode\";\nimport { connect } from 'react-redux';\n\nconst AnyReactComponent = ({\n  text\n}) => {\n  const GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"setpin\",\n    src: require(\"../images/mappin.png\"),\n    alt: \" pin\",\n    width: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"setpin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, text));\n};\n\nconst GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`;\n\nclass GoogleMap extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getLatLng = address => {\n      // set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\n      Geocode.setApiKey(GOOGLE_API_KEY); // set response language. Defaults to english.\n\n      Geocode.setLanguage(\"en\"); // set response region. Its optional.\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\n\n      Geocode.setRegion(\"es\"); // Enable or disable logs. Its optional.\n\n      Geocode.enableDebug();\n      Geocode.fromAddress(address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log(lat, lng);\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.renderPins = () => {// if(this.props.currentRenderedBusinesses.length > 0){\n      // this.props.currentRenderedBusinesses.map( business => {\n      //     this.getLatLng(business.address)\n      //     <AnyReactComponent lat={32.77} lng={-79.93} text=\"\" />\n      // })\n      // }\n    };\n  }\n\n  render() {\n    debugger;\n    console.log(this.getLatLng(\"120 cannon street 29403\"));\n    return (\n      /*#__PURE__*/\n      // Important! Always set the container height explicitly\n      React.createElement(\"div\", {\n        className: \"mapPageLocation\",\n        style: {\n          height: '100vh',\n          width: '30%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: GOOGLE_API_KEY\n        },\n        defaultCenter: this.props.center,\n        defaultZoom: this.props.zoom,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AnyReactComponent, {\n        lat: 32.77,\n        lng: -79.93,\n        text: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(AnyReactComponent, {\n        lat: 32.792610,\n        lng: -79.939370,\n        text: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 1\n        }\n      })))\n    );\n  }\n\n}\n\nGoogleMap.defaultProps = {\n  center: {\n    lat: 32.792610,\n    lng: -79.93\n  },\n  zoom: 11\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentRenderedBusinesses: state.currentRenderedBusinesses\n  };\n};\n\nexport default connect(mapStateToProps)(GoogleMap);","map":{"version":3,"sources":["/Users/spencerblum/Development/projects/OpenCare/frontend/src/component/GoogleMap.js"],"names":["React","Component","GoogleMapReact","Geocode","connect","AnyReactComponent","text","GOOGLE_API_KEY","process","env","REACT_APP_GOOGLE_MAP_KEY","require","GoogleMap","getLatLng","address","setApiKey","setLanguage","setRegion","enableDebug","fromAddress","then","response","lat","lng","results","geometry","location","console","log","error","renderPins","render","height","width","key","props","center","zoom","defaultProps","mapStateToProps","state","currentRenderedBusinesses"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Geocode from \"react-geocode\";\nimport { connect } from 'react-redux'\n\n\nconst AnyReactComponent = ({ text }) => {\n\n    const GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`\nreturn (\n<div id= \"content\"> \n\n<img className=\"setpin\" src={require(\"../images/mappin.png\")}  alt=\" pin\" width=\"30px\" />\n    <h4 className=\"setpin\" >{text}</h4>\n</div>)}\n\nconst GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`\n\nclass GoogleMap extends Component {\n\ngetLatLng = (address) => {\n\n    // set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\n    Geocode.setApiKey(GOOGLE_API_KEY);\n\n    // set response language. Defaults to english.\n    Geocode.setLanguage(\"en\");\n\n    // set response region. Its optional.\n    // A Geocoding request with region=es (Spain) will return the Spanish city.\n    Geocode.setRegion(\"es\");\n\n    // Enable or disable logs. Its optional.\n    Geocode.enableDebug();\n\n    Geocode.fromAddress(address).then(\n    response => {\n        const { lat, lng } = response.results[0].geometry.location;\n        console.log(lat, lng);\n    },\n    error => {\n        console.error(error);\n    }\n    )\n}\n\n  static defaultProps = {\n  \n    center: {\n      lat: 32.792610,\n      lng: -79.93\n    },\n    zoom: 11\n  };\n\n\n  renderPins = () => {\n    // if(this.props.currentRenderedBusinesses.length > 0){\n    // this.props.currentRenderedBusinesses.map( business => {\n    //     this.getLatLng(business.address)\n    //     <AnyReactComponent lat={32.77} lng={-79.93} text=\"\" />\n    // })\n    // }\n\n  }\n\n  render() {\n    debugger\n    console.log(this.getLatLng(\"120 cannon street 29403\"))\n    return (\n      // Important! Always set the container height explicitly\n      <div  className = \"mapPageLocation\" style={{ height: '100vh', width: '30%'  }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: GOOGLE_API_KEY }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n          <AnyReactComponent\n            lat={32.77}\n            lng={-79.93}\n            text=\"\"\n          />\n\n<AnyReactComponent\n            lat={32.792610}\n            lng={-79.939370}\n            text=\"\"\n          />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state =>  {\n    return { \n        currentRenderedBusinesses: state.currentRenderedBusinesses,\n    }\n}\n\n\n\nexport default connect(mapStateToProps)(GoogleMap);"]},"metadata":{},"sourceType":"module"}