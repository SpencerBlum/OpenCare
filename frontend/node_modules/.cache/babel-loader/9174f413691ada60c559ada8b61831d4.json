{"ast":null,"code":"var _jsxFileName = \"/Users/spencerblum/Development/projects/OpenCare/frontend/src/component/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Geocode from \"react-geocode\";\nimport { connect } from 'react-redux';\n\nconst AnyReactComponent = ({\n  text\n}) => {\n  const GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"setpin\",\n    src: require(\"../images/mappin.png\"),\n    alt: \" pin\",\n    width: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"setpin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, text));\n};\n\nconst GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`;\n\nclass GoogleMap extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderPins = () => {\n      if (this.props.currentRenderedBusinesses.length > 0) {\n        this.props.currentRenderedBusinesses.map(business => {\n          /*#__PURE__*/\n          React.createElement(AnyReactComponent, {\n            lat: 32.77,\n            lng: -79.93,\n            text: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 9\n            }\n          });\n        });\n      }\n    };\n  }\n\n  render() {\n    console.log(\"hello\");\n    console.log(this.getLatLng(\"120 cannon street 29403\"));\n    console.log(\"hello\");\n    return (\n      /*#__PURE__*/\n      // Important! Always set the container height explicitly\n      React.createElement(\"div\", {\n        className: \"mapPageLocation\",\n        style: {\n          height: '100vh',\n          width: '30%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: GOOGLE_API_KEY\n        },\n        defaultCenter: this.props.center,\n        defaultZoom: this.props.zoom,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AnyReactComponent, {\n        lat: 32.77,\n        lng: -79.93,\n        text: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(AnyReactComponent, {\n        lat: 32.792610,\n        lng: -79.939370,\n        text: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 1\n        }\n      })))\n    );\n  }\n\n}\n\nGoogleMap.defaultProps = {\n  center: {\n    lat: 32.792610,\n    lng: -79.93\n  },\n  zoom: 11\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentRenderedBusinesses: state.currentRenderedBusinesses\n  };\n};\n\nexport default connect(mapStateToProps)(GoogleMap);","map":{"version":3,"sources":["/Users/spencerblum/Development/projects/OpenCare/frontend/src/component/GoogleMap.js"],"names":["React","Component","GoogleMapReact","Geocode","connect","AnyReactComponent","text","GOOGLE_API_KEY","process","env","REACT_APP_GOOGLE_MAP_KEY","require","GoogleMap","renderPins","props","currentRenderedBusinesses","length","map","business","render","console","log","getLatLng","height","width","key","center","zoom","defaultProps","lat","lng","mapStateToProps","state"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Geocode from \"react-geocode\";\nimport { connect } from 'react-redux'\n\n\nconst AnyReactComponent = ({ text }) => {\n\n    const GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`\nreturn (\n<div id= \"content\"> \n\n<img className=\"setpin\" src={require(\"../images/mappin.png\")}  alt=\" pin\" width=\"30px\" />\n    <h4 className=\"setpin\" >{text}</h4>\n</div>)}\n\nconst GOOGLE_API_KEY = `${process.env.REACT_APP_GOOGLE_MAP_KEY}`\n\nclass GoogleMap extends Component {\n\n// getLatLng = (address) => {\n//     // set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\n//     Geocode.setApiKey(GOOGLE_API_KEY);\n//     // set response language. Defaults to english.\n//     Geocode.setLanguage(\"en\");\n//     // set response region. Its optional.\n//     // A Geocoding request with region=es (Spain) will return the Spanish city.\n//     Geocode.setRegion(\"es\");\n//     // Enable or disable logs. Its optional.\n//     Geocode.enableDebug();\n\n//     Geocode.fromAddress(address).then(\n//     response => {\n//         const { lat, lng } = response.results[0].geometry.location;\n//         let obj = { \n//             lat: lat,\n//             lng: lng\n//          } \n//          console.log(obj)\n//         return obj\n\n//     },\n//     error => {\n//         console.error(error);\n//     }\n//     )\n// }\n\n  static defaultProps = {\n  \n    center: {\n      lat: 32.792610,\n      lng: -79.93\n    },\n    zoom: 11\n  };\n\n\n  renderPins = () => {\n    if(this.props.currentRenderedBusinesses.length > 0){\n    this.props.currentRenderedBusinesses.map( business => {\n    \n        <AnyReactComponent lat={32.77} lng={-79.93} text=\"\" />\n    })\n    }\n\n  }\n\n  render() {\n    console.log(\"hello\")\n    console.log(this.getLatLng(\"120 cannon street 29403\"))\n    console.log(\"hello\")\n    return (\n      // Important! Always set the container height explicitly\n      <div  className = \"mapPageLocation\" style={{ height: '100vh', width: '30%'  }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: GOOGLE_API_KEY }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n          <AnyReactComponent\n            lat={32.77}\n            lng={-79.93}\n            text=\"\"\n          />\n\n<AnyReactComponent\n            lat={32.792610}\n            lng={-79.939370}\n            text=\"\"\n          />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state =>  {\n    return { \n        currentRenderedBusinesses: state.currentRenderedBusinesses,\n    }\n}\n\n\n\nexport default connect(mapStateToProps)(GoogleMap);"]},"metadata":{},"sourceType":"module"}